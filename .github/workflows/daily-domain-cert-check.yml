name: 每日域名WHOIS与SSL证书检测

on:
  schedule:
    - cron: '0 2 * * *'  # 每日UTC 0点（北京时间8点）运行
  workflow_dispatch:  # 支持手动触发

jobs
  check-domain-cert:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      WARNING_DAYS: 30  # 全局警告阈值（这里统一修改，控制所有警告线）
    steps:
      - name: 安装WHOIS和jq工具
        run: sudo apt-get update && sudo apt-get install -y whois jq

      # 检查主域名WHOIS信息（引用全局变量，增加重试机制）
      - name: 检查主域名 bushanyanchi.com WHOIS信息
        id: check_domain_whois
        run: |
          MAIN_DOMAIN="bushanyanchi.com"

          # 重试机制（最多3次）
          RETRY_COUNT=0
          MAX_RETRIES=3
          WHOIS_SUCCESS=false

          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "WHOIS查询尝试 $((RETRY_COUNT + 1))/$MAX_RETRIES..."
            if whois $MAIN_DOMAIN > whois_result.txt 2>/dev/null; then
              echo "✅ WHOIS查询成功"
              WHOIS_SUCCESS=true
              break
            else
              echo "❌ WHOIS查询失败"
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "等待3秒后重试..."
                sleep 3
              fi
            fi
          done

          if [ "$WHOIS_SUCCESS" = false ]; then
            echo "❌ WHOIS查询失败，已达最大重试次数"
            EXPIRE_TIME="查询失败"
            REMAIN_DAYS="未知"
            DOMAIN_RISK="❌ WHOIS查询失败，请检查网络连接"
          else
            # 支持更多字段格式
            EXPIRE_FIELDS=("Registry Expiry Date" "Expiration Date" "expires" "Expiry Date" "paid-till" "registry expiry date")
            EXPIRE_TIME=""

            for FIELD in "${EXPIRE_FIELDS[@]}"; do
              # 使用更灵活的匹配方式，支持前后空格和不同分隔符
              EXPIRE_TIME=$(grep -i "^[[:space:]]*$FIELD[[:space:]]*:" whois_result.txt | head -1 | awk -F': ' '{print $2}' | xargs)
              if [ -n "$EXPIRE_TIME" ]; then
                echo "✅ 找到到期时间字段：$FIELD"
                break
              fi
            done

            if [ -z "$EXPIRE_TIME" ]; then
              echo "⚠️ 未能从WHOIS记录中提取到期时间"
              echo "WHOIS记录内容："
              cat whois_result.txt
              EXPIRE_TIME="未提取到"
              REMAIN_DAYS="未知"
              DOMAIN_RISK="❓ 无法获取域名到期信息，请手动检查"
            else
              # 标准化时间格式
              EXPIRE_TIME_CLEAN=$(echo $EXPIRE_TIME | sed 's/T/ /g' | sed 's/Z//g' | sed 's/\..*//g')

              if EXPIRE_TIMESTAMP=$(date -d "$EXPIRE_TIME_CLEAN" +%s 2>/dev/null); then
                CURRENT_TIMESTAMP=$(date +%s)
                REMAIN_DAYS=$(( (EXPIRE_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 ))

                if [ $REMAIN_DAYS -lt 0 ]; then
                  REMAIN_DAYS="已过期（$((-REMAIN_DAYS)) 天）"
                  DOMAIN_RISK="🚨 主域名已过期！请立即处理！"
                elif [ $REMAIN_DAYS -lt $WARNING_DAYS ]; then
                  REMAIN_DAYS="$REMAIN_DAYS 天（即将过期）"
                  DOMAIN_RISK="⚠️ 主域名剩余天数不足$WARNING_DAYS天，需尽快续费！"
                else
                  REMAIN_DAYS="$REMAIN_DAYS 天"
                  DOMAIN_RISK=""
                fi
              else
                echo "❌ 时间格式转换失败：$EXPIRE_TIME_CLEAN"
                EXPIRE_TIME="$EXPIRE_TIME（格式异常）"
                REMAIN_DAYS="解析失败"
                DOMAIN_RISK="❌ 时间格式解析失败，请手动检查"
              fi
            fi
          fi

          echo "expire_time=$EXPIRE_TIME" >> $GITHUB_OUTPUT
          echo "remain_days=$REMAIN_DAYS" >> $GITHUB_OUTPUT
          echo "domain_risk=$DOMAIN_RISK" >> $GITHUB_OUTPUT

      # 检查子域名SSL证书（引用全局变量）
      - name: 检查子域名SSL证书
        id: check_subdomain_cert
        run: |
          SUB_DOMAINS=("gk.bushanyanchi.com" "gk-admin.bushanyanchi.com")
          CERT_RESULTS=""
          CERT_RISK=""
          
          for DOMAIN in "${SUB_DOMAINS[@]}"; do
            echo "检测域名：$DOMAIN"

            # 重试机制（最多2次）
            RETRY_COUNT=0
            MAX_RETRIES=2
            CERT_SUCCESS=false

            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              echo "SSL证书检测尝试 $((RETRY_COUNT + 1))/$MAX_RETRIES..."
              CERT=$(echo | timeout 15s openssl s_client -connect $DOMAIN:443 -servername $DOMAIN 2>/dev/null | openssl x509 -noout -dates 2>/dev/null)

              if [ -n "$CERT" ]; then
                echo "✅ SSL证书获取成功"
                CERT_SUCCESS=true
                break
              else
                echo "❌ SSL证书获取失败"
                RETRY_COUNT=$((RETRY_COUNT + 1))
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  echo "等待2秒后重试..."
                  sleep 2
                fi
              fi
            done

            if [ "$CERT_SUCCESS" = true ]; then
              NOT_BEFORE=$(echo "$CERT" | grep 'notBefore' | awk -F'=' '{print $2}' | xargs)
              NOT_AFTER=$(echo "$CERT" | grep 'notAfter' | awk -F'=' '{print $2}' | xargs)
              NOT_AFTER_TIMESTAMP=$(date -d "$NOT_AFTER" +%s 2>/dev/null)
              CURRENT_TIMESTAMP=$(date +%s)
              REMAIN_DAYS=$(( (NOT_AFTER_TIMESTAMP - CURRENT_TIMESTAMP) / 86400 ))
          
              if [ $REMAIN_DAYS -lt 0 ]; then
                REMAIN_DAYS="已过期（$((-REMAIN_DAYS)) 天）"
                CERT_RISK+="🚨 $DOMAIN 证书已过期！请立即更新！\n"
              elif [ $REMAIN_DAYS -lt $WARNING_DAYS ]; then  # 引用全局变量
                REMAIN_DAYS="$REMAIN_DAYS 天（即将过期）"
                CERT_RISK+="⚠️ $DOMAIN 证书剩余天数不足$WARNING_DAYS天，需尽快更新！\n"  # 引用全局变量
              else
                REMAIN_DAYS="$REMAIN_DAYS 天"
              fi
            else
              NOT_BEFORE="未获取到证书"
              NOT_AFTER="未获取到证书"
              REMAIN_DAYS="无法连接（检查域名解析或443端口）"
              CERT_RISK+="❌ $DOMAIN 无法获取证书信息，请手动检查！\n"
            fi

            CERT_RESULTS+="🔹 $DOMAIN\n   - 生效时间：$NOT_BEFORE\n   - 到期时间：$NOT_AFTER\n   - 剩余天数：$REMAIN_DAYS\n\n"
          done
          
          echo "cert_results=$CERT_RESULTS" >> $GITHUB_OUTPUT
          echo "cert_risk=$CERT_RISK" >> $GITHUB_OUTPUT

      # 发送飞书检测报告（仅在有风险时发送）
      - name: 发送飞书检测报告
        if: |
          contains(steps.check_domain_whois.outputs.domain_risk, '过期') ||
          contains(steps.check_domain_whois.outputs.domain_risk, '不足') ||
          contains(steps.check_domain_whois.outputs.domain_risk, '失败') ||
          contains(steps.check_subdomain_cert.outputs.cert_risk, '过期') ||
          contains(steps.check_subdomain_cert.outputs.cert_risk, '不足') ||
          contains(steps.check_subdomain_cert.outputs.cert_risk, '无法获取')
        run: |
          # 生成简洁的文本通知内容
          ALERT_MESSAGE="域名过期提醒：\n"

          # 添加域名风险信息和剩余天数
          if [ -n "${{ steps.check_domain_whois.outputs.domain_risk }}" ]; then
            ALERT_MESSAGE+="📍 域名信息：\n"
            ALERT_MESSAGE+="  - 状态：${{ steps.check_domain_whois.outputs.domain_risk }}\n"
            ALERT_MESSAGE+="  - 剩余天数：${{ steps.check_domain_whois.outputs.remain_days }}\n"
            ALERT_MESSAGE+="  - 到期时间：${{ steps.check_domain_whois.outputs.expire_time }}\n\n"
          fi

          # 添加证书风险信息
          if [ -n "${{ steps.check_subdomain_cert.outputs.cert_risk }}" ]; then
            ALERT_MESSAGE+="🔒 SSL证书信息：\n"
            # 移除最后的换行符，避免多余空行
            CERT_RISK_CLEAN=$(echo "${{ steps.check_subdomain_cert.outputs.cert_risk }}" | sed 's/$//' | tr -d '\n')
            ALERT_MESSAGE+="  - $CERT_RISK_CLEAN\n"
            ALERT_MESSAGE+="\n📋 详细证书状态：\n${{ steps.check_subdomain_cert.outputs.cert_results }}\n"
          fi

          NOTIFY_CONTENT=$(cat <<EOF
          {
            "msg_type": "text",
            "content": {
                "text": "$ALERT_MESSAGE"
            }
          }
          EOF
          )

          echo "📤 发送飞书风险通知..."
          echo "发送时间：$(date '+%Y-%m-%d %H:%M:%S UTC')"
          echo "通知内容：$ALERT_MESSAGE"

          # 发送飞书通知并处理错误
          if curl -X POST \
            "https://open.feishu.cn/open-apis/bot/v2/hook/93854238-e45b-431e-a309-ec36daf581f6" \
            -H "Content-Type: application/json" \
            -d "$NOTIFY_CONTENT" \
            --max-time 30 \
            --silent \
            --show-error \
            --fail-with-body; then
            echo "✅ 飞书通知发送成功"
          else
            echo "❌ 飞书通知发送失败"
            echo "请检查 FEISHU_WEBHOOK_URL 密钥配置是否正确"
            exit 1
          fi

      - name: 记录无风险状态
        if: |
          !contains(steps.check_domain_whois.outputs.domain_risk, '过期') &&
          !contains(steps.check_domain_whois.outputs.domain_risk, '不足') &&
          !contains(steps.check_domain_whois.outputs.domain_risk, '失败') &&
          !contains(steps.check_subdomain_cert.outputs.cert_risk, '过期') &&
          !contains(steps.check_subdomain_cert.outputs.cert_risk, '不足') &&
          !contains(steps.check_subdomain_cert.outputs.cert_risk, '无法获取')
        run: |
          echo "✅ 所有检测项目正常，剩余天数均≥60天"
          echo "🔹 主域名剩余天数：${{ steps.check_domain_whois.outputs.remain_days }}"
          echo "🔹 SSL证书状态正常，无需发送通知"
          echo "📅 检测时间：$(date '+%Y-%m-%d %H:%M:%S UTC')"
