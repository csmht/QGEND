name: Extract Image and Git Branch with Warnings
on:
  workflow_dispatch:  # 手动触发
  push:
    branches: [ main ]
    paths:
      - '**.yaml'

jobs:
  extract-info:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出当前仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2：安装 yq 工具
      - name: Install yq
        run: |
          if ! command -v yq &> /dev/null; then
            echo "⚠️ yq not found, installing now..."
            sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq
          else
            echo "✅ yq is already installed"
          fi

      # 步骤3：从YAML提取image属性（含警告）
      - name: Extract image from YAML
        id: extract-image
        run: |
          YAML_FILE="s.yaml"  # 替换为实际YAML文件路径
          
          # 检查文件是否存在
          if [ ! -f "$YAML_FILE" ]; then
            echo "⚠️ [WARNING] YAML file '$YAML_FILE' not found in repository!"
            echo "image=unknown" >> $GITHUB_OUTPUT
            exit 0  # 不中断工作流，返回默认值
          fi
          
          # 提取属性值
          IMAGE_VALUE=$(yq eval '.resources.fcDemo.props.customContainerConfig.image' "$YAML_FILE")
          
          # 检查提取结果是否为空
          if [ -z "$IMAGE_VALUE" ] || [ "$IMAGE_VALUE" = "null" ]; then
            echo "⚠️ [WARNING] Failed to extract 'resources.fcDemo.props.customContainerConfig.image' from $YAML_FILE"
            IMAGE_VALUE="unknown"
          fi
          
          echo "✅ Extracted image: $IMAGE_VALUE"
          echo "image=$IMAGE_VALUE" >> $GITHUB_OUTPUT

      # 步骤4：访问接口获取git_branch和git_commit_id（含警告）
      - name: Fetch git_branch from API
        id: fetch-branch
        run: |
          API_URL="https://gk-regir-docker-nvlgswjdem.cn-shenzhen.fcapp.run/ready/detail"  # 实际接口地址

          # 检查接口URL是否配置
          if [ -z "$API_URL" ] || [ "$API_URL" = "https://your-api-url.com/endpoint" ]; then
            echo "⚠️ [WARNING] API URL is not set or using default value! Please update API_URL."
            BRANCH_VALUE="unknown"
          else
            # 发送请求并分别获取响应体和HTTP状态码
            BODY=$(curl -s "$API_URL")
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL")

            # 检查HTTP状态码
            if [ "$HTTP_CODE" -ne 200 ]; then
              echo "⚠️ [WARNING] API request failed! HTTP status code: $HTTP_CODE"
              BRANCH_VALUE="unknown"
            else
              # 解析响应体中的git_branch
              BRANCH_VALUE=$(echo "$BODY" | jq -r '.details.git_branch')
              if [ "$BRANCH_VALUE" = "null" ] || [ -z "$BRANCH_VALUE" ]; then
                echo "⚠️ [WARNING] 'details.git_branch' not found in API response! Response: $BODY"
                BRANCH_VALUE="unknown"
              fi
            fi
          fi

          echo "✅ Fetched git_branch: $BRANCH_VALUE"
          echo "git_branch=$BRANCH_VALUE" >> $GITHUB_OUTPUT

      # 步骤5：获取git_commit_id
      - name: Fetch git_commit_id from API
        id: fetch-commit
        run: |
          API_URL="https://gk-regir-docker-nvlgswjdem.cn-shenzhen.fcapp.run/ready/detail"

          BODY=$(curl -s "$API_URL")
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL")

          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "⚠️ [WARNING] API request failed! HTTP status code: $HTTP_CODE"
            COMMIT_VALUE="unknown"
          else
            COMMIT_VALUE=$(echo "$BODY" | jq -r '.details.git_commit_id')
            if [ "$COMMIT_VALUE" = "null" ] || [ -z "$COMMIT_VALUE" ]; then
              echo "⚠️ [WARNING] 'details.git_commit_id' not found in API response!"
              COMMIT_VALUE="unknown"
            fi
          fi

          echo "✅ Fetched git_commit_id: $COMMIT_VALUE"
          echo "git_commit_id=$COMMIT_VALUE" >> $GITHUB_OUTPUT

      # 步骤6：解析镜像标签
      - name: Parse image tag
        id: parse-image
        run: |
          IMAGE="${{ steps.extract-image.outputs.image }}"
          if [ "$IMAGE" = "unknown" ]; then
            echo "image_branch=unknown" >> $GITHUB_OUTPUT
            echo "image_commit=unknown" >> $GITHUB_OUTPUT
            echo "⚠️ Cannot parse image tag - image is unknown"
          else
            # 提取标签部分（最后一个冒号后的内容）
            TAG=${IMAGE##*:}

            # 解析标签：BRANCH-DATE-COMMIT
            IFS='-' read -r BRANCH DATE COMMIT <<< "$TAG"

            echo "image_branch=$BRANCH" >> $GITHUB_OUTPUT
            echo "image_commit=$COMMIT" >> $GITHUB_OUTPUT

            echo "✅ Parsed image tag - Branch: $BRANCH, Date: $DATE, Commit: $COMMIT"
          fi

      # 步骤7：版本比较和结果输出
      - name: Compare versions and show final results
        run: |
          echo "===== Version Comparison ====="

          # 获取各步骤的输出值
          API_COMMIT="${{ steps.fetch-commit.outputs.git_commit_id }}"
          IMAGE_COMMIT="${{ steps.parse-image.outputs.image_commit }}"
          API_BRANCH="${{ steps.fetch-branch.outputs.git_branch }}"
          IMAGE_BRANCH="${{ steps.parse-image.outputs.image_branch }}"
          IMAGE_FULL="${{ steps.extract-image.outputs.image }}"

          echo "Full Image: $IMAGE_FULL"
          echo "API Branch: $API_BRANCH"
          echo "Image Branch: $IMAGE_BRANCH"
          echo "API Commit: $API_COMMIT"
          echo "Image Commit: $IMAGE_COMMIT"
          echo ""

          # 分支比较
          if [ "$API_BRANCH" = "$IMAGE_BRANCH" ] && [ "$API_BRANCH" != "unknown" ]; then
            echo "✅ Branch match: $API_BRANCH"
          else
            echo "❌ Branch mismatch! API: $API_BRANCH, Image: $IMAGE_BRANCH"
          fi

          # 提交ID比较（将完整提交ID截取前7位）
          if [ "$API_COMMIT" != "unknown" ] && [ "$IMAGE_COMMIT" != "unknown" ]; then
            API_COMMIT_SHORT=${API_COMMIT:0:7}
            if [ "$API_COMMIT_SHORT" = "$IMAGE_COMMIT" ]; then
              echo "✅ Commit match: $API_COMMIT_SHORT"
              echo "🎉 Version consistency verified!"
            else
              echo "❌ Commit mismatch! API: $API_COMMIT_SHORT, Image: $IMAGE_COMMIT"
              echo "⚠️ The running container image version does not match the latest code version."
              echo "💡 Consider updating the container image to the latest version."
            fi
          else
            echo "⚠️ Cannot compare commits - one or both values are unknown"
          fi

          echo ""
          echo "===== Summary ====="
          if [ "$API_BRANCH" = "unknown" ] || [ "$IMAGE_BRANCH" = "unknown" ] || [ "$API_COMMIT" = "unknown" ] || [ "$IMAGE_COMMIT" = "unknown" ]; then
            echo "⚠️ [WARNING] Some values are 'unknown' - check previous steps for issues."
          else
            echo "✅ All values retrieved successfully"
          fi