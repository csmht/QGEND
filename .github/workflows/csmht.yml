name: Extract Image and Git Branch with Warnings
on:
  workflow_dispatch:  # 手动触发
  push:
    branches: [ main ]
    paths:
      - '**.yaml'

jobs:
  extract-info:
    runs-on: ubuntu-latest
    steps:
      # 步骤1：检出当前仓库代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤2：安装 yq 工具
      - name: Install yq
        run: |
          if ! command -v yq &> /dev/null; then
            echo "⚠️ yq not found, installing now..."
            sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
            sudo chmod +x /usr/bin/yq
          else
            echo "✅ yq is already installed"
          fi

      # 步骤3：从YAML提取image属性（含警告）
      - name: Extract image from YAML
        id: extract-image
        run: |
          YAML_FILE="s.yaml"  # 替换为实际YAML文件路径
          
          # 检查文件是否存在
          if [ ! -f "$YAML_FILE" ]; then
            echo "⚠️ [WARNING] YAML file '$YAML_FILE' not found in repository!"
            echo "image=unknown" >> $GITHUB_OUTPUT
            exit 0  # 不中断工作流，返回默认值
          fi
          
          # 提取属性值
          IMAGE_VALUE=$(yq eval '.resources.fcDemo.props.customContainerConfig.image' "$YAML_FILE")
          
          # 检查提取结果是否为空
          if [ -z "$IMAGE_VALUE" ] || [ "$IMAGE_VALUE" = "null" ]; then
            echo "⚠️ [WARNING] Failed to extract 'resources.fcDemo.props.customContainerConfig.image' from $YAML_FILE"
            IMAGE_VALUE="unknown"
          fi
          
          echo "✅ Extracted image: $IMAGE_VALUE"
          echo "image=$IMAGE_VALUE" >> $GITHUB_OUTPUT

      # 步骤4：访问接口获取git_branch和git_commit_id（含重试机制）
      - name: Fetch git_branch from API with retry
        id: fetch-branch
        run: |
          API_URL="https://gk-regir-docker-nvlgswjdem.cn-shenzhen.fcapp.run/ready/detail"  # 实际接口地址
          MAX_RETRIES=3
          RETRY_DELAY=5
          SERVER_DOWN=false

          # 检查接口URL是否配置
          if [ -z "$API_URL" ] || [ "$API_URL" = "https://your-api-url.com/endpoint" ]; then
            echo "⚠️ [WARNING] API URL is not set or using default value! Please update API_URL."
            BRANCH_VALUE="unknown"
          else
            echo "🔄 Starting API request with retry mechanism..."

            for i in $(seq 1 $MAX_RETRIES); do
              echo "Attempt $i/$MAX_RETRIES..."

              # 发送请求，设置100秒超时
              BODY=$(curl -s --max-time 100 "$API_URL" 2>&1)
              CURL_EXIT_CODE=$?
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 100 "$API_URL" 2>&1)

              echo "CURL exit code: $CURL_EXIT_CODE"
              echo "HTTP status code: $HTTP_CODE"

              # 检查curl命令执行状态
              if [ $CURL_EXIT_CODE -ne 0 ]; then
                echo "❌ Request failed with curl error: $BODY"
                if [ $i -eq $MAX_RETRIES ]; then
                  echo "🚨 All $MAX_RETRIES attempts failed. Server appears to be down."
                  SERVER_DOWN=true
                  BRANCH_VALUE="server_down"
                else
                  echo "⏳ Retrying in ${RETRY_DELAY} seconds..."
                  sleep $RETRY_DELAY
                fi
                continue
              fi

              # 检查HTTP状态码
              if [ "$HTTP_CODE" -ne 200 ]; then
                echo "❌ HTTP error: $HTTP_CODE - Response: $BODY"
                if [ $i -eq $MAX_RETRIES ]; then
                  echo "🚨 All $MAX_RETRIES attempts failed with HTTP errors."
                  SERVER_DOWN=true
                  BRANCH_VALUE="server_down"
                else
                  echo "⏳ Retrying in ${RETRY_DELAY} seconds..."
                  sleep $RETRY_DELAY
                fi
                continue
              fi

              # 验证JSON格式
              if ! echo "$BODY" | jq empty 2>/dev/null; then
                echo "❌ Invalid JSON response: $BODY"
                if [ $i -eq $MAX_RETRIES ]; then
                  echo "🚨 All $MAX_RETRIES attempts failed with invalid JSON."
                  SERVER_DOWN=true
                  BRANCH_VALUE="server_down"
                else
                  echo "⏳ Retrying in ${RETRY_DELAY} seconds..."
                  sleep $RETRY_DELAY
                fi
                continue
              fi

              # 解析响应体中的git_branch
              BRANCH_VALUE=$(echo "$BODY" | jq -r '.details.git_branch')
              if [ "$BRANCH_VALUE" = "null" ] || [ -z "$BRANCH_VALUE" ]; then
                echo "❌ 'details.git_branch' not found in API response! Response: $BODY"
                if [ $i -eq $MAX_RETRIES ]; then
                  echo "🚨 All $MAX_RETRIES attempts failed - unexpected response format."
                  BRANCH_VALUE="unknown"
                else
                  echo "⏳ Retrying in ${RETRY_DELAY} seconds..."
                  sleep $RETRY_DELAY
                fi
                continue
              fi

              # 成功获取数据
              echo "✅ Successfully fetched git_branch on attempt $i"
              break
            done
          fi

          # 设置输出变量
          echo "git_branch=$BRANCH_VALUE" >> $GITHUB_OUTPUT
          echo "server_down=$SERVER_DOWN" >> $GITHUB_OUTPUT

          echo "✅ Final git_branch result: $BRANCH_VALUE"
          if [ "$SERVER_DOWN" = "true" ]; then
            echo "🚨 Server status: DOWN"
          else
            echo "✅ Server status: UP"
          fi

      # 步骤5：获取git_commit_id（复用之前API调用的结果）
      - name: Extract git_commit_id from API response
        id: fetch-commit
        run: |
          # 检查服务器状态
          if [ "${{ steps.fetch-branch.outputs.server_down }}" = "true" ]; then
            echo "⚠️ Server is down, cannot fetch git_commit_id"
            COMMIT_VALUE="server_down"
          elif [ "${{ steps.fetch-branch.outputs.git_branch }}" = "unknown" ]; then
            echo "⚠️ API response was invalid, cannot fetch git_commit_id"
            COMMIT_VALUE="unknown"
          else
            echo "✅ Using API response from previous step to extract git_commit_id"

            # 重新发起一次API请求来获取完整响应（因为之前的响应没有保存）
            API_URL="https://gk-regir-docker-nvlgswjdem.cn-shenzhen.fcapp.run/ready/detail"

            # 使用相同的重试机制，但只尝试1次因为前面已经验证了服务器状态
            BODY=$(curl -s --max-time 100 "$API_URL" 2>&1)
            CURL_EXIT_CODE=$?
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 100 "$API_URL" 2>&1)

            if [ $CURL_EXIT_CODE -ne 0 ]; then
              echo "❌ Unexpected curl error when fetching git_commit_id: $BODY"
              COMMIT_VALUE="unknown"
            elif [ "$HTTP_CODE" -ne 200 ]; then
              echo "❌ Unexpected HTTP error when fetching git_commit_id: $HTTP_CODE"
              COMMIT_VALUE="unknown"
            else
              # 验证JSON格式
              if ! echo "$BODY" | jq empty 2>/dev/null; then
                echo "❌ Invalid JSON response when fetching git_commit_id: $BODY"
                COMMIT_VALUE="unknown"
              else
                # 解析响应体中的git_commit_id
                COMMIT_VALUE=$(echo "$BODY" | jq -r '.details.git_commit_id')
                if [ "$COMMIT_VALUE" = "null" ] || [ -z "$COMMIT_VALUE" ]; then
                  echo "❌ 'details.git_commit_id' not found in API response! Response: $BODY"
                  COMMIT_VALUE="unknown"
                else
                  echo "✅ Successfully extracted git_commit_id: $COMMIT_VALUE"
                fi
              fi
            fi
          fi

          echo "git_commit_id=$COMMIT_VALUE" >> $GITHUB_OUTPUT
          echo "✅ Final git_commit_id result: $COMMIT_VALUE"

      # 步骤6：解析镜像标签
      - name: Parse image tag
        id: parse-image
        run: |
          IMAGE="${{ steps.extract-image.outputs.image }}"
          if [ "$IMAGE" = "unknown" ]; then
            echo "image_branch=unknown" >> $GITHUB_OUTPUT
            echo "image_commit=unknown" >> $GITHUB_OUTPUT
            echo "⚠️ Cannot parse image tag - image is unknown"
          else
            # 提取标签部分（最后一个冒号后的内容）
            TAG=${IMAGE##*:}

            # 解析标签：BRANCH-DATE-COMMIT
            IFS='-' read -r BRANCH DATE COMMIT <<< "$TAG"

            echo "image_branch=$BRANCH" >> $GITHUB_OUTPUT
            echo "image_commit=$COMMIT" >> $GITHUB_OUTPUT

            echo "✅ Parsed image tag - Branch: $BRANCH, Date: $DATE, Commit: $COMMIT"
          fi

      # 步骤7：版本比较和结果输出
      - name: Compare versions and show final results
        id: compare
        run: |
          echo "===== Version Comparison ====="

          # 获取各步骤的输出值
          API_COMMIT="${{ steps.fetch-commit.outputs.git_commit_id }}"
          IMAGE_COMMIT="${{ steps.parse-image.outputs.image_commit }}"
          API_BRANCH="${{ steps.fetch-branch.outputs.git_branch }}"
          IMAGE_BRANCH="${{ steps.parse-image.outputs.image_branch }}"
          IMAGE_FULL="${{ steps.extract-image.outputs.image }}"

          echo "Full Image: $IMAGE_FULL"
          echo "API Branch: $API_BRANCH"
          echo "Image Branch: $IMAGE_BRANCH"
          echo "API Commit: $API_COMMIT"
          echo "Image Commit: $IMAGE_COMMIT"
          echo ""

          # 分支比较
          if [ "$API_BRANCH" = "$IMAGE_BRANCH" ] && [ "$API_BRANCH" != "unknown" ]; then
            echo "✅ Branch match: $API_BRANCH"
          else
            echo "❌ Branch mismatch! API: $API_BRANCH, Image: $IMAGE_BRANCH"
          fi

          # 提交ID比较（将完整提交ID截取前7位）
          if [ "$API_COMMIT" != "unknown" ] && [ "$IMAGE_COMMIT" != "unknown" ]; then
            API_COMMIT_SHORT=${API_COMMIT:0:7}
            if [ "$API_COMMIT_SHORT" = "$IMAGE_COMMIT" ]; then
              echo "✅ Commit match: $API_COMMIT_SHORT"
              echo "🎉 Version consistency verified!"
            else
              echo "❌ Commit mismatch! API: $API_COMMIT_SHORT, Image: $IMAGE_COMMIT"
              echo "⚠️ The running container image version does not match the latest code version."
              echo "💡 Consider updating the container image to the latest version."
            fi
          else
            echo "⚠️ Cannot compare commits - one or both values are unknown"
          fi

          echo ""
          echo "===== Summary ====="
          if [ "$API_BRANCH" = "unknown" ] || [ "$IMAGE_BRANCH" = "unknown" ] || [ "$API_COMMIT" = "unknown" ] || [ "$IMAGE_COMMIT" = "unknown" ]; then
            echo "⚠️ [WARNING] Some values are 'unknown' - check previous steps for issues."
          else
            echo "✅ All values retrieved successfully"
          fi

          # 设置版本不一致检测标志和服务器状态检测
          VERSION_MISMATCH=false
          SERVER_DOWN=false

          # 检查服务器是否宕机
          if [ "$API_BRANCH" = "server_down" ] || [ "$API_COMMIT" = "server_down" ]; then
            SERVER_DOWN=true
            echo "🚨 Server is down - cannot perform version comparison"
            echo "server_down=true" >> $GITHUB_OUTPUT
            echo "version_mismatch=false" >> $GITHUB_OUTPUT
          # 检查版本是否不一致
          elif [ "$API_BRANCH" != "$IMAGE_BRANCH" ] || ([ "$API_COMMIT" != "unknown" ] && [ "$IMAGE_COMMIT" != "unknown" ] && [ "${API_COMMIT:0:7}" != "$IMAGE_COMMIT" ]); then
            VERSION_MISMATCH=true
            echo "version_mismatch=true" >> $GITHUB_OUTPUT
            echo "server_down=false" >> $GITHUB_OUTPUT
          else
            echo "version_mismatch=false" >> $GITHUB_OUTPUT
            echo "server_down=false" >> $GITHUB_OUTPUT
          fi

      # 步骤8：服务器宕机时发送飞书警告
      - name: Send Feishu alert on server down
        if: steps.compare.outputs.server_down == 'true'
        run: |
          echo "🚨 Server down detected, sending Feishu alert..."

          # 获取环境变量
          WEBHOOK_URL="https://open.feishu.cn/open-apis/bot/v2/hook/93854238-e45b-431e-a309-ec36daf581f6"

          if [ -z "$WEBHOOK_URL" ]; then
            echo "⚠️ [WARNING] FEISHU_WEBHOOK_URL not configured. Please add it to repository secrets."
            exit 0
          fi

          # 获取基本信息
          IMAGE_FULL="${{ steps.extract-image.outputs.image }}"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"

          # 构建服务器宕机警告消息
          cat << EOF > feishu_message.json
          {
            "msg_type": "text",
            "content": {
              "text": "🚨 服务器宕机警告\n\nAPI服务器无法访问！\n\n检测详情：\n- 经过3次重试，每次100秒超时\n- 总尝试时间约5分钟\n- 服务器无响应或返回错误\n\n当前运行的镜像：\n${IMAGE_FULL}\n\n紧急建议操作：\n1. 立即检查服务器状态\n2. 联系运维团队处理\n3. 确认服务器网络连接\n4. 检查服务进程是否正常运行\n\n相关链接：\n代码仓库：${REPO_URL}\nAPI地址：https://gk-regir-docker-nvlgswjdem.cn-shenzhen.fcapp.run/ready/detail\n\n⚠️ 此为严重故障，请立即处理！"
            }
          }
          EOF

          # 发送飞书消息
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d @feishu_message.json)

          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "✅ Server down alert sent successfully!"
          else
            echo "❌ Failed to send Feishu alert. HTTP code: $HTTP_CODE"
          fi

      # 步骤9：版本不一致时发送飞书警告
      - name: Send Feishu alert on version mismatch
        if: steps.compare.outputs.version_mismatch == 'true'
        run: |
          echo "🚨 Version mismatch detected, sending Feishu alert..."

          # 获取环境变量
          WEBHOOK_URL="https://open.feishu.cn/open-apis/bot/v2/hook/93854238-e45b-431e-a309-ec36daf581f6"

          if [ -z "$WEBHOOK_URL" ]; then
            echo "⚠️ [WARNING] FEISHU_WEBHOOK_URL not configured. Please add it to repository secrets."
            exit 0
          fi

          # 获取版本信息
          API_COMMIT="${{ steps.fetch-commit.outputs.git_commit_id }}"
          IMAGE_COMMIT="${{ steps.parse-image.outputs.image_commit }}"
          API_BRANCH="${{ steps.fetch-branch.outputs.git_branch }}"
          IMAGE_BRANCH="${{ steps.parse-image.outputs.image_branch }}"
          IMAGE_FULL="${{ steps.extract-image.outputs.image }}"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"

          # 构建飞书文本消息
          cat << EOF > feishu_message.json
          {
            "msg_type": "text",
            "content": {
              "text": "🚨 版本不一致警告\n\n版本对比信息：\n测试环境版本：\n  分支：${API_BRANCH}\n  提交：${API_COMMIT:0:7}\ns.yaml声明版本：\n  分支：${IMAGE_BRANCH}\n  提交：${IMAGE_COMMIT}\n\n当前镜像：\n${IMAGE_FULL}\n\n建议操作：\n1. 检查部署流程是否正常\n2. 更新容器镜像到最新版本\n3. 确认代码版本与部署版本一致\n\n相关链接：\n代码仓库：${REPO_URL}\nAPI状态：https://gk-regir-docker-nvlgswjdem.cn-shenzhen.fcapp.run/ready/detail"
            }
          }
          EOF

          # 发送飞书消息
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d @feishu_message.json)

          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "✅ Feishu alert sent successfully!"
          else
            echo "❌ Failed to send Feishu alert. HTTP code: $HTTP_CODE"
          fi